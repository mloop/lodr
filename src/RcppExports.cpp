// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// slice_sample_normal_ex
arma::vec slice_sample_normal_ex(arma::vec y_data, arma::vec x_data, arma::vec mean_x_preds, arma::vec beta, double sigma_2_y, arma::mat sigma_x_preds, double LOD_lower, double LOD_upper, int sample_size);
RcppExport SEXP _lodr_slice_sample_normal_ex(SEXP y_dataSEXP, SEXP x_dataSEXP, SEXP mean_x_predsSEXP, SEXP betaSEXP, SEXP sigma_2_ySEXP, SEXP sigma_x_predsSEXP, SEXP LOD_lowerSEXP, SEXP LOD_upperSEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_data(x_dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_x_preds(mean_x_predsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2_y(sigma_2_ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_x_preds(sigma_x_predsSEXP);
    Rcpp::traits::input_parameter< double >::type LOD_lower(LOD_lowerSEXP);
    Rcpp::traits::input_parameter< double >::type LOD_upper(LOD_upperSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_sample_normal_ex(y_data, x_data, mean_x_preds, beta, sigma_2_y, sigma_x_preds, LOD_lower, LOD_upper, sample_size));
    return rcpp_result_gen;
END_RCPP
}
// LOD_fit_test
List LOD_fit_test(arma::vec y_data, arma::mat x_data, arma::vec mean_x_preds, arma::vec beta, double sigma_2_y, arma::mat sigma_x_preds, int no_of_samples, double threshold, int max_iterations, arma::vec LOD_u_l, double ystart);
RcppExport SEXP _lodr_LOD_fit_test(SEXP y_dataSEXP, SEXP x_dataSEXP, SEXP mean_x_predsSEXP, SEXP betaSEXP, SEXP sigma_2_ySEXP, SEXP sigma_x_predsSEXP, SEXP no_of_samplesSEXP, SEXP thresholdSEXP, SEXP max_iterationsSEXP, SEXP LOD_u_lSEXP, SEXP ystartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_data(x_dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_x_preds(mean_x_predsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2_y(sigma_2_ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_x_preds(sigma_x_predsSEXP);
    Rcpp::traits::input_parameter< int >::type no_of_samples(no_of_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type LOD_u_l(LOD_u_lSEXP);
    Rcpp::traits::input_parameter< double >::type ystart(ystartSEXP);
    rcpp_result_gen = Rcpp::wrap(LOD_fit_test(y_data, x_data, mean_x_preds, beta, sigma_2_y, sigma_x_preds, no_of_samples, threshold, max_iterations, LOD_u_l, ystart));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_test
List bootstrap_test(int num_of_boots, arma::vec y_data, arma::mat x_data, int no_of_samples, double threshold, int max_iterations, arma::vec LOD_u_l, double ystart);
RcppExport SEXP _lodr_bootstrap_test(SEXP num_of_bootsSEXP, SEXP y_dataSEXP, SEXP x_dataSEXP, SEXP no_of_samplesSEXP, SEXP thresholdSEXP, SEXP max_iterationsSEXP, SEXP LOD_u_lSEXP, SEXP ystartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_of_boots(num_of_bootsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_data(x_dataSEXP);
    Rcpp::traits::input_parameter< int >::type no_of_samples(no_of_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type LOD_u_l(LOD_u_lSEXP);
    Rcpp::traits::input_parameter< double >::type ystart(ystartSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_test(num_of_boots, y_data, x_data, no_of_samples, threshold, max_iterations, LOD_u_l, ystart));
    return rcpp_result_gen;
END_RCPP
}
// LOD_fit_multiple
List LOD_fit_multiple(arma::vec y_data, arma::mat x_data, arma::vec mean_x_preds, arma::vec beta, double sigma_2_y, arma::mat sigma_x_preds, int no_of_samples, double threshold, int max_iterations, arma::mat LOD_u_l, int sampler);
RcppExport SEXP _lodr_LOD_fit_multiple(SEXP y_dataSEXP, SEXP x_dataSEXP, SEXP mean_x_predsSEXP, SEXP betaSEXP, SEXP sigma_2_ySEXP, SEXP sigma_x_predsSEXP, SEXP no_of_samplesSEXP, SEXP thresholdSEXP, SEXP max_iterationsSEXP, SEXP LOD_u_lSEXP, SEXP samplerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_data(x_dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean_x_preds(mean_x_predsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2_y(sigma_2_ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_x_preds(sigma_x_predsSEXP);
    Rcpp::traits::input_parameter< int >::type no_of_samples(no_of_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LOD_u_l(LOD_u_lSEXP);
    Rcpp::traits::input_parameter< int >::type sampler(samplerSEXP);
    rcpp_result_gen = Rcpp::wrap(LOD_fit_multiple(y_data, x_data, mean_x_preds, beta, sigma_2_y, sigma_x_preds, no_of_samples, threshold, max_iterations, LOD_u_l, sampler));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_multi_test
List bootstrap_multi_test(int num_of_boots, arma::vec y_data, arma::mat x_data, int no_of_samples, double threshold, int max_iterations, arma::mat LOD_u_l, int sampler);
RcppExport SEXP _lodr_bootstrap_multi_test(SEXP num_of_bootsSEXP, SEXP y_dataSEXP, SEXP x_dataSEXP, SEXP no_of_samplesSEXP, SEXP thresholdSEXP, SEXP max_iterationsSEXP, SEXP LOD_u_lSEXP, SEXP samplerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_of_boots(num_of_bootsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_data(x_dataSEXP);
    Rcpp::traits::input_parameter< int >::type no_of_samples(no_of_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LOD_u_l(LOD_u_lSEXP);
    Rcpp::traits::input_parameter< int >::type sampler(samplerSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_multi_test(num_of_boots, y_data, x_data, no_of_samples, threshold, max_iterations, LOD_u_l, sampler));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lodr_slice_sample_normal_ex", (DL_FUNC) &_lodr_slice_sample_normal_ex, 9},
    {"_lodr_LOD_fit_test", (DL_FUNC) &_lodr_LOD_fit_test, 11},
    {"_lodr_bootstrap_test", (DL_FUNC) &_lodr_bootstrap_test, 8},
    {"_lodr_LOD_fit_multiple", (DL_FUNC) &_lodr_LOD_fit_multiple, 11},
    {"_lodr_bootstrap_multi_test", (DL_FUNC) &_lodr_bootstrap_multi_test, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_lodr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
